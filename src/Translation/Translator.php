<?php
namespace Laradic\Idea\Metadata\Translation;

use Illuminate\Filesystem\Filesystem;

class Translator extends \Illuminate\Translation\Translator
{
    protected $fs;

    public function __construct(LoaderInterface $loader, $locale, Filesystem $fs)
    {
        parent::__construct($loader, $locale);
        $this->fs = $fs;
    }

    /**
     * @return \Illuminate\Translation\LoaderInterface|\Laradic\Idea\Metadata\Translation\FileLoader
     */
    public function getLoader()
    {
        return parent::getLoader(); // TODO: Change the autogenerated stub
    }


    public function all($locale = null)
    {
        $namespacedGroups = [ ];
        foreach ( $this->getLoader()->getHints() as $namespace => $path ) {
            $namespacedGroups[ $namespace ] = $this->loadAllInPath($path, $namespace, $locale);
        }

        $namespacedGroups[ '*' ] = $this->loadAllInPath($this->getLoader()->getPath(), '*', $locale);

        $all = [ ];
        foreach ( $namespacedGroups as $namespace => $groups ) {
            foreach ( $groups as $group ) {
                $key         = $namespace === '*' ? $group : "{$namespace}::{$group}";
                $all[ $key ] = $this->get($key);
            }
        }

        return $all;
    }

    /**
     * @param      $path
     * @param      $namespace
     * @param null $locale
     *
     * @return array
     */
    protected function loadAllInPath($path, $namespace, $locale = null)
    {
        $groups = [ ];

        foreach ( array_unique($this->parseLocale($locale)) as $_locale ) {
            if ( $this->fs->isDirectory($path . DIRECTORY_SEPARATOR . $_locale) ) {
                foreach ( $this->fs->allFiles($path . DIRECTORY_SEPARATOR . $_locale) as $file ) {
                    if ( $file->getExtension() === 'php' ) {
                        $group = $file->getFileInfo()->getBasename('.php');
                        $this->load($namespace, $groups[] = $group, $_locale);
                    }
                }
            }
        }
        return $groups;
    }

}
